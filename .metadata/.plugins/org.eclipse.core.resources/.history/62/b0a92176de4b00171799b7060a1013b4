package com.mycompany.myapp.controller;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.net.URLEncoder;
import java.util.Date;
import java.util.List;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.FileCopyUtils;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.mycompany.myapp.dto.UsedMarketBoard;
import com.mycompany.myapp.service.UsedMarketService;

@Controller
public class UsedMarketController {
	private static final Logger LOGGER = LoggerFactory.getLogger(UsedMarketController.class);
	private static String bsavedfilename;

	@Autowired
	private UsedMarketService service;

	@Autowired
	private ServletContext servletContext;

	@RequestMapping("/usedmarket/main")
	public String main(@RequestParam(defaultValue = "1") int pageNo, Model model) {
		// 한 페이지를 구성하는 행수
		int rowsPerPage = 5;
		// 한 그룹을 구성하는 페이지 수
		int pagesPerGroup = 5;
		// 총 행수
		int totalRows = service.boardTotalRows();
		// 전체 페이지 수
		int totalPageNo = (totalRows / rowsPerPage) + ((totalRows % rowsPerPage != 0) ? 1 : 0);
		// 전체 그룹 수
		int totalGroupNo = (totalPageNo / pagesPerGroup) + ((totalPageNo % pagesPerGroup != 0) ? 1 : 0);
		// 현재 그룹 번호
		int groupNo = (pageNo - 1) / pagesPerGroup + 1;
		// 현재 그룹의 시작 페이지 번호
		int startPageNo = (groupNo - 1) * pagesPerGroup + 1;
		// 현재 그룹의 마지막 페이지 번호
		int endPageNo = startPageNo + pagesPerGroup - 1;
		if (groupNo == totalGroupNo)
			endPageNo = totalPageNo;

		// 현재 페이지의 행의 데이터 가져오기
		List<UsedMarketBoard> list = service.boardListPage(pageNo, rowsPerPage);
		// View로 넘겨줄 데이터
		model.addAttribute("list", list);
		model.addAttribute("pagesPerGroup", pagesPerGroup);
		model.addAttribute("totalPageNo", totalPageNo);
		model.addAttribute("totalGroupNo", totalGroupNo);
		model.addAttribute("groupNo", groupNo);
		model.addAttribute("startPageNo", startPageNo);
		model.addAttribute("endPageNo", endPageNo);
		model.addAttribute("pageNo", pageNo);
		

		// View 이름 리턴
		return "usedmarket/main";
	}

	@RequestMapping(value = "/usedmarket/write", method = RequestMethod.GET)
	public String writeGet() {
		return "usedmarket/write";
	}

	@RequestMapping(value = "/usedmarket/write", method = RequestMethod.POST)
	public String writePost(UsedMarketBoard board) throws Exception {
		// board Command 객체
		// 첨부 파일에 대한 정보를 컬럼값으로 설정
		board.setBoriginalfilename(board.getBattach().getOriginalFilename());
		board.setBfilecontent(board.getBattach().getContentType());
		String fileName = new Date().getTime() + "-" + board.getBoriginalfilename();
		board.setBsavedfilename(fileName);

		// 첨부 파일을 서버 로컬 시스템에 저장
		String realPath = servletContext.getRealPath("/WEB-INF/upload/");
		File file = new File(realPath + fileName);
		board.getBattach().transferTo(file);

		// 서비스 객체로 요청 처리 요청
		service.BoardWrite(board);

		return "redirect:/usedmarket/main";
	}

	@RequestMapping("/usedmarket/detail")
	public String detail(int bno, Model model) {
		UsedMarketBoard board = service.getBoard(bno);
		bsavedfilename = board.getBsavedfilename();
		System.out.println(bsavedfilename);
		model.addAttribute("board", board);

		return "usedmarket/detail";
	}

	@RequestMapping("/usedmarket/checkBpassword")
	public String checkBpassword(int bno, String bpassword, Model model) {
		String result = service.boardCheckBpassword(bno, bpassword);
		model.addAttribute("result", result);
		return "usedmarket/checkBpassword";
	}

	@RequestMapping(value = "usedmarket/update", method = RequestMethod.GET)
	public String updateGet(int bno, Model model) {
		UsedMarketBoard board = service.getBoard(bno);
		model.addAttribute("board", board);
		return "usedmarket/update";
	}

	@RequestMapping(value = "usedmarket/update", method = RequestMethod.POST)
	public String updatePost(UsedMarketBoard board) throws Exception {
		if (!board.getBattach().isEmpty()) {
			// 첨부 파일에 대한 정보를 컬럼값으로 설정
			board.setBoriginalfilename(board.getBattach().getOriginalFilename());
			board.setBfilecontent(board.getBattach().getContentType());
			String fileName = new Date().getTime() + "-" + board.getBoriginalfilename();
			board.setBsavedfilename(fileName);

			// 첨부 파일을 서버 로컬 시스템에 저장
			String realPath = servletContext.getRealPath("/WEB-INF/upload/");
			File file = new File(realPath + fileName);
			board.getBattach().transferTo(file);
		}
		// 게시물 수정 처리
		service.boardUpdate(board);

		return "redirect:/usedmarket/detail?bno=" + board.getBno();
	}

	@RequestMapping("/usedmarket/delete")
	public String delete(int bno) {
		service.boardDelete(bno);
		return "redirect:/usedmarket/main";
	}

	@RequestMapping("usedmarket/file/download")
	public void download(HttpServletResponse response, @RequestHeader("User-Agent") String userAgent)
			throws IOException {
		// 응답 HTTP 헤더행을 추가
		// 1)파일이름(옵션)
		System.out.println(bsavedfilename);
		String fileName = bsavedfilename;
		String encodingFileName;
		if (userAgent.contains("MSIE") || userAgent.contains("Trident") || userAgent.contains("Edge")) {
			encodingFileName = URLEncoder.encode(fileName, "UTF-8");
		} else {
			encodingFileName = new String(fileName.getBytes("UTF-8"), "ISO-8859-1");
		}

		// attachment 파일로저장하는행위를 취해야한다.(다이얼로그를 띄워야한다.)
		response.addHeader("Content-Disposition", "attachment; filename=\"" + encodingFileName + "\"");

		// 2)파일종류(필수)
		response.addHeader("Content-Type", "image/jpeg");
		// 3)파일사이즈(옵션)
		File file = new File(servletContext.getRealPath("/WEB-INF/upload/" + fileName));
		long fileSize = file.length();
		response.addHeader("Content-Length", String.valueOf(fileSize));

		// 응답 HTTP 본문에 파일 데이터를 출력
		OutputStream os = response.getOutputStream();
		FileInputStream fis = new FileInputStream(file);
		FileCopyUtils.copy(fis, os);
		os.flush();
		fis.close();
		os.close();
	}


}
